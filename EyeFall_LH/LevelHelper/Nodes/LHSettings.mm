//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#import "LHSettings.h"
#import "cocos2d.h"
@implementation LHSettings
////////////////////////////////////////////////////////////////////////////////

@synthesize useRetinaOnIpad;
@synthesize lhPtmRatio;
@synthesize customAlpha;
@synthesize convertLevel;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
+ (LHSettings*)sharedInstance{
	static id sharedInstance = nil;
	if (sharedInstance == nil){
		sharedInstance = [[LHSettings alloc] init];
	}
    return sharedInstance;
}
////////////////////////////////////////////////////////////////////////////////
-(void)dealloc
{
	[imagesFolder release];
	[super dealloc];
}
////////////////////////////////////////////////////////////////////////////////
- (id)init
{
	self = [super init];
	if (self != nil) {
		useRetinaOnIpad = true;
		convertLevel = true;
		lhPtmRatio = 32.0f;
		customAlpha = 1.0f;
		convertRatio = CGPointMake(1, 1);
		newBodyId = 0;
		imagesFolder = [[NSMutableString alloc] init];
	}
	return self;
}
////////////////////////////////////////////////////////////////////////////////
-(int)newBodyId{
	return newBodyId++;
}

-(void) setImageFolder:(NSString*)img{
	if(img != nil)
		[imagesFolder setString:img];
}
-(NSString*)imageFolder{
	return imagesFolder;
}

-(NSString*)imagePath:(NSString*)file
{
    if([self isIpad])
    {   
        NSRange lastPt = [file rangeOfString:@"." options:NSBackwardsSearch];
        if(lastPt.location != NSNotFound)
        {
            NSString *newstring = [file stringByReplacingCharactersInRange:lastPt
                                                                withString:@"-hd."];
            
			
            NSString *fullpath = [CCFileUtils fullPathFromRelativePath:newstring];
			
			fullpath = [NSString stringWithFormat:@"%@%@", imagesFolder, fullpath];
			
            if([[NSFileManager defaultManager] fileExistsAtPath:fullpath])
            {
                return fullpath;
            }
            
			fullpath = [NSString stringWithFormat:@"%@%@", imagesFolder, file];
            return fullpath;
            
        }
        return [NSString stringWithFormat:@"%@%@", imagesFolder, file];
    }
    return [NSString stringWithFormat:@"%@%@", imagesFolder, file];
}
-(bool)shouldScaleImageOnRetina:(NSString*)image
{
    //if it contains -hd return true - else return false
    if(image == nil)
        return false;
    
    if ([image rangeOfString:@"-hd"].location == NSNotFound) {
        return false;
    } else {
        return true;
    }
        
    return false;
}

-(bool)isIpad
{
    if(![self useRetinaOnIpad]){
        return false;
    }
    
#ifndef __MAC_OS_X_VERSION_MAX_ALLOWED
	
    
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
#if __IPHONE_3_2 <= __IPHONE_OS_VERSION_MAX_ALLOWED
	UIDevice* thisDevice = [UIDevice currentDevice];
	if ([thisDevice respondsToSelector:@selector(userInterfaceIdiom)]){
		if(thisDevice.userInterfaceIdiom == UIUserInterfaceIdiomPad){
			return true;
		}
	}
	else{
		return false;
	}
#else
	return false;
#endif
    
#endif
    
#else
	return true;
#endif
	
	return false;
}

-(void) setConvertRatio:(CGPoint)val{
	convertRatio = val;
}

-(CGPoint) convertRatio{
	
	if(!convertLevel)
		return CGPointMake(1, 1);
	
	return convertRatio;
}
		


@end
